type Cohort @entity {
  id: ID!
  address: Bytes! #address
  chain: String! #string
  deployer: Bytes! #address
  dao: Bytes! #address
  token: Bytes! #address
  sbtUrl: String! #string
  implementation: Bytes! #address
  tokenAmount: BigInt! #uint256
  sharesAmount: BigInt! #uint256
  time: BigInt! #uint256 seconds for slash
  treasury: Bytes! #address
  createdAt: BigInt! #uint256 timestamp of creation
  initiates: [Initiate!] @derivedFrom(field: "cohort")
  criesForHelp: [CryForHelp!] @derivedFrom(field: "cohort")
  claims: [Claim!] @derivedFrom(field: "cohort")
  Sacrifices: [Sacrifice!] @derivedFrom(field: "cohort")

  totalMembers: BigInt!
  claimedMembers: BigInt!
  slashedMembers: BigInt!
  successPercentage: BigDecimal!
}

type Initiate @entity {
  id: ID! #address + cohort (to support multiple cohorts per same address)
  address: Bytes! #address
  benefactor: Bytes! #address of sponsor (if no sponsor it == id)
  tokenId: BigInt! #uint256 id of SBT
  stake: BigInt! #uint256
  deadline: BigInt! #uint256
  joinedAt: BigInt! #uint256 block timestamp when joined
  cohort: Cohort!
  claimed: Boolean!
  claim: Claim @derivedFrom(field: "initiate")
  sacrificed: Boolean!
  sacrifice: Sacrifice @derivedFrom(field: "initiate")
}

type CryForHelp @entity {
  id: ID!
  message: String!
  sender: Initiate!
  cohort: Cohort!
}

type Claim @entity {
  id: ID!
  initiate: Initiate!
  amount: BigInt! #uint256
  cohort: Cohort!
}

type Sacrifice @entity {
  id: ID!
  initiate: Initiate! # address
  amount: BigInt! # uint256
  slasher: Bytes! # address
  cohort: Cohort!
}


type Metric @entity {
  id: ID!
  totalCohorts: BigInt! # uint256
  totalMembers: BigInt!
  claimedMembers: BigInt!
  slashedMembers: BigInt!

  slashRate: BigDecimal! #should be a float? 
  claimRate: BigDecimal!
  averageCohortSize: BigDecimal!
}